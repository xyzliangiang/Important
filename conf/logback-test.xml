 <!--https://www.playframework.com/documentation/latest/SettingsLogger -->
<configuration>

  <conversionRule conversionWord="coloredLevel" converterClass="play.api.libs.logback.ColoredLevel" />

  <!-- FileAppender 输出文件的路径还有格式 -->
  <appender name="FILE" class="ch.qos.logback.core.FileAppender">
    <file>${application.home:-.}/logs/application1.log</file>
    <encoder>
      <pattern>%date [%level] from %logger in %thread - %message%n%xException</pattern>
    </encoder>
  </appender>

  <!-- ConsoleAppender 输出控制台的格式 -->
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <pattern>%date %coloredLevel from %logger - %message%n%xException{10} %n</pattern>
    </encoder>
  </appender>

  <appender name="ASYNCFILE" class="ch.qos.logback.classic.AsyncAppender">
    <appender-ref ref="FILE" />
  </appender>

  <appender name="ASYNCSTDOUT" class="ch.qos.logback.classic.AsyncAppender">
    <appender-ref ref="STDOUT" />
  </appender>

  <logger name="play" level="INFO" />
  <logger name="application" level="DEBUG" />

  <root level="DEBUG">
    <appender-ref ref="ASYNCFILE" />
    <appender-ref ref="ASYNCSTDOUT" />
  </root>

</configuration>
<!-- 以<configuration>开头，后面有零个或多个<appender>元素，有零个或多个<logger>元素，有最多一个<root>元素 -->

<!--
logback的配置，需要配置输出源appender，打日志的loger（子节点）和root（根节点），实际上，它输出日志是从子节点开始，
子节点如果有输出源直接输入，如果无，判断配置的addtivity，是否像上级传递，即是否向root传递，传递则采用root的输出源，
否则不输出日志。
-->
        <!--  问题1： 不同的类打印到不同的文件 -->
        <!--  问题2： 这就需要一个log文件夹，来管理所有的包 -->
        <!--  问题3： reload不影响之前的文件 -->
        <!--  问题4： 设置一天一换log名字，且设置如果log大于多少，就进行新建 -->
        <!--  https://blog.csdn.net/zbajie001/article/details/79596109 -->
        <!--  https://www.jianshu.com/p/d1a565f192b9 -->
        <!--  问题5： 要选择过滤一些东西 -->
        <!--  问题6： 日志规范 https://www.cnblogs.com/kofxxf/p/3713472.html-->
        <!--  通常情况下在程序日志里记录一些比较有意义的状态数据：程序启动，退出的时间点；程序运行消耗时间；耗时程序的执行进度；
              重要变量的状态变化。初次之外，在公共的日志里规避打印程序的调试或者提示信息。 -->
        <!--  问题7： 推荐使用log.error("Error reading configuration file", e); -->
        <!--   -->
        <!--  初始化步骤  Logback尝试在类路径中查找名为logback-test.xml 的文件 。 如果找不到这样的文件，它会检查类路径中的文件 logback.xml。 -->
        <!--   -->
        <!--   -->
        <!--   -->


<!--<configuration>-->
<!--　　　　　　　　　　<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
  <!--　　　　　　　　　　　　<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
  <!--　　　　　　　　　　　　　　<fileNamePattern>logFile.%d{yyyy-MM-dd}.log</fileNamePattern>-->
  <!--　　　　　　　　　　　　　　<maxHistory>30</maxHistory>-->
  <!--　　　　　　　　　　　　</rollingPolicy>-->
  <!--　　　　　　　　　　　　<encoder>-->
  <!--　　　　　　　　　　　　　　<pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>-->
  <!--　　　　　　　　　　　　</encoder>-->
  <!--　　　　　　　　　　</appender>-->

<!--　　　　　　　　　　<root level="DEBUG">-->
  <!--　　　　　　　　　　　　<appender-ref ref="FILE" />-->
  <!--　　　　　　　　　　</root>-->
<!--</configuration>-->
        <!--　　　　　　　　上述配置表示每天生成一个日志文件，保存30天的日志文件。-->
        <!--　　　<configuration>-->
<!--　　　　　　　　　　<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">-->

  <!--　　　　　　　　　　　　<file>${application.home:-.}/logs/test.log</file>-->

  <!--　　　　　　　　　　　　<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">-->
  <!--　　　　　　　　　　　　　　<fileNamePattern>tests.%i.log.zip</fileNamePattern>-->
  <!--　　　　　　　　　　　　　　<minIndex>1</minIndex>-->
  <!--　　　　　　　　　　　　　　<maxIndex>3</maxIndex>-->
  <!--　　　　　　　　　　　　</rollingPolicy>-->

  <!--　　　　　　　　　　　　<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
  <!--　　　　　　　　　　　　　　<maxFileSize>5MB</maxFileSize>-->
  <!--　　　　　　　　　　　　</triggeringPolicy>-->
  <!--　　　　　　　　　　　　<encoder>-->
  <!--　　　　　　　　　　　　　　<pattern> %-4relative [%thread] %-5level %logger{35} - %msg</pattern>-->
  <!--　　　　　　　　　　　　</encoder>-->
  <!--　　　　　　　　　　</appender>-->

<!--　　　　　　　　　　<root level="DEBUG">-->
  <!--　　　　　　　　　　　　<appender-ref ref="FILE" />-->
  <!--　　　　　　　　　　</root>-->
<!--　　　　　　　　</configuration>-->
        <!--　　　　　　　　上述配置表示按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。
        窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。-->


        <!--<configuration>-->

        <!--<conversionRule conversionWord="coloredLevel" converterClass="play.api.libs.logback.ColoredLevel" />-->

        <!--&lt;!&ndash; FileAppender 输出文件的路径还有格式 &ndash;&gt;-->
        <!--<appender name="FILE" class="ch.qos.logback.core.FileAppender">-->
        <!--<file>${application.home:-.}/logs/application.log</file>-->
        <!--<encoder>-->
        <!--<pattern>%date [%level] from %logger in %thread - %message%n%xException</pattern>-->
        <!--</encoder>-->
        <!--</appender>-->

        <!--&lt;!&ndash; ConsoleAppender 输出控制台的格式 &ndash;&gt;-->
        <!--<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">-->
        <!--<encoder>-->
        <!--<pattern>logback -&ndash;&gt;  %date %coloredLevel from %logger - %message%n%xException{10} %n</pattern>-->
        <!--</encoder>-->
        <!--</appender>-->

        <!--<appender name="ASYNCFILE" class="ch.qos.logback.classic.AsyncAppender">-->
        <!--<appender-ref ref="FILE" />-->
        <!--</appender>-->

        <!--<appender name="ASYNCSTDOUT" class="ch.qos.logback.classic.AsyncAppender">-->
        <!--<appender-ref ref="STDOUT" />-->
        <!--</appender>-->

        <!--<logger name="play" level="INFO" />-->
        <!--<logger name="application" level="DEBUG" />-->

        <!--<root level="DEBUG">-->
        <!--<appender-ref ref="ASYNCFILE" />-->
        <!--<appender-ref ref="ASYNCSTDOUT" />-->
        <!--</root>-->

        <!--</configuration>-->
        <!-- 以<configuration>开头，后面有零个或多个<appender>元素，有零个或多个<logger>元素，有最多一个<root>元素 -->

        <!--
        logback的配置，需要配置输出源appender，打日志的loger（子节点）和root（根节点），实际上，它输出日志是从子节点开始，
        子节点如果有输出源直接输入，如果无，判断配置的addtivity，是否像上级传递，即是否向root传递，传递则采用root的输出源，
        否则不输出日志。
        -->
        <!--  问题1： 不同的类打印到不同的文件 -->
        <!--  问题2： 这就需要一个log文件夹，来管理所有的包 -->
        <!--  问题3： reload不影响之前的文件 -->
        <!--  问题4： 设置一天一换log名字，且设置如果log大于多少，就进行新建 -->
        <!--  https://blog.csdn.net/zbajie001/article/details/79596109 -->
        <!--  https://www.jianshu.com/p/d1a565f192b9 -->
        <!--  问题5： 要选择过滤一些东西 -->
        <!--  问题6： 日志规范 https://www.cnblogs.com/kofxxf/p/3713472.html-->
        <!--  通常情况下在程序日志里记录一些比较有意义的状态数据：程序启动，退出的时间点；程序运行消耗时间；耗时程序的执行进度；
              重要变量的状态变化。初次之外，在公共的日志里规避打印程序的调试或者提示信息。 -->
        <!--  问题7： 推荐使用log.error("Error reading configuration file", e); -->
        <!--   -->
        <!--  初始化步骤  Logback尝试在类路径中查找名为logback-test.xml 的文件 。 如果找不到这样的文件，它会检查类路径中的文件 logback.xml。 -->
        <!--   -->
        <!--   -->
        <!--   -->
